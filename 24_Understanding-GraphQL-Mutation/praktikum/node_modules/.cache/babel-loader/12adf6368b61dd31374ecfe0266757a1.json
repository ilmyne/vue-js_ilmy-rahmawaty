{"ast":null,"code":"import { __extends } from 'tslib';\nimport { ApolloLink } from 'apollo-link';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nvar WebSocketLink = function (_super) {\n  __extends(WebSocketLink, _super);\n\n  function WebSocketLink(paramsOrClient) {\n    var _this = _super.call(this) || this;\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      _this.subscriptionClient = paramsOrClient;\n    } else {\n      _this.subscriptionClient = new SubscriptionClient(paramsOrClient.uri, paramsOrClient.options, paramsOrClient.webSocketImpl);\n    }\n\n    return _this;\n  }\n\n  WebSocketLink.prototype.request = function (operation) {\n    return this.subscriptionClient.request(operation);\n  };\n\n  return WebSocketLink;\n}(ApolloLink);\n\nexport { WebSocketLink };","map":{"version":3,"mappings":";;;;;AA6BmCA;;AAGjC,yBACEC,cADF,EACkE;AADlE,gBAGEC,qBAAO,IAHT;;AAKE,QAAID,cAAc,YAAYE,kBAA9B,EAAkD;AAChDC,WAAI,CAACC,kBAAL,GAA0BJ,cAA1B;AACD,KAFD,MAEO;AACLG,WAAI,CAACC,kBAAL,GAA0B,IAAIF,kBAAJ,CACxBF,cAAc,CAACK,GADS,EAExBL,cAAc,CAACM,OAFS,EAGxBN,cAAc,CAACO,aAHS,CAA1B;AAKD;;;AACF;;AAEMC,oCAAP,UAAeC,SAAf,EAAmC;AACjC,WAAO,KAAKL,kBAAL,CAAwBM,OAAxB,CAAgCD,SAAhC,CAAP;AAGD,GAJM;;AAKT;AAxBA,EAAmCE","names":["tslib_1.__extends","paramsOrClient","_super","SubscriptionClient","_this","subscriptionClient","uri","options","webSocketImpl","WebSocketLink","operation","request","ApolloLink"],"sources":["../src/webSocketLink.ts"],"sourcesContent":["import { ApolloLink, Operation, FetchResult, Observable } from 'apollo-link';\n\nimport { SubscriptionClient, ClientOptions } from 'subscriptions-transport-ws';\n\nexport namespace WebSocketLink {\n  /**\n   * Configuration to use when constructing the subscription client (subscriptions-transport-ws).\n   */\n  export interface Configuration {\n    /**\n     * The endpoint to connect to.\n     */\n    uri: string;\n\n    /**\n     * Options to pass when constructing the subscription client.\n     */\n    options?: ClientOptions;\n\n    /**\n     * A custom WebSocket implementation to use.\n     */\n    webSocketImpl?: any;\n  }\n}\n\n// For backwards compatibility.\nexport import WebSocketParams = WebSocketLink.Configuration;\n\nexport class WebSocketLink extends ApolloLink {\n  private subscriptionClient: SubscriptionClient;\n\n  constructor(\n    paramsOrClient: WebSocketLink.Configuration | SubscriptionClient,\n  ) {\n    super();\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      this.subscriptionClient = paramsOrClient;\n    } else {\n      this.subscriptionClient = new SubscriptionClient(\n        paramsOrClient.uri,\n        paramsOrClient.options,\n        paramsOrClient.webSocketImpl,\n      );\n    }\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    return this.subscriptionClient.request(operation) as Observable<\n      FetchResult\n    >;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
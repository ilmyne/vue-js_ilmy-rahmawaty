{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar graphql_1 = require(\"./graphql\");\n\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n  if (execOptions === void 0) {\n    execOptions = {};\n  }\n\n  var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n  var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n  var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n  var resultMapper = execOptions.resultMapper;\n\n  var fragmentMatcher = execOptions.fragmentMatcher || function () {\n    return true;\n  };\n\n  var execContext = {\n    fragmentMap: fragmentMap,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    resultMapper: resultMapper,\n    resolver: resolver,\n    fragmentMatcher: fragmentMatcher\n  };\n  return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\n\nexports.graphql = graphql;\n\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var fragmentMap, contextValue, variables, result, execute;\n\n    var _this = this;\n\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n          result = {};\n\n          execute = function execute(selection) {\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n              var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n              return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                      return [2];\n                    }\n\n                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                    return [4, executeField(selection, rootValue, execContext)];\n\n                  case 1:\n                    fieldResult = _a.sent();\n                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n\n                    if (fieldResult !== undefined) {\n                      if (result[resultFieldKey] === undefined) {\n                        result[resultFieldKey] = fieldResult;\n                      } else {\n                        graphql_1.merge(result[resultFieldKey], fieldResult);\n                      }\n                    }\n\n                    return [2];\n\n                  case 2:\n                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                      fragment = selection;\n                    } else {\n                      fragment = fragmentMap[selection.name.value];\n\n                      if (!fragment) {\n                        throw new Error(\"No fragment named \" + selection.name.value);\n                      }\n                    }\n\n                    typeCondition = fragment.typeCondition.name.value;\n                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n\n                  case 3:\n                    fragmentResult = _a.sent();\n                    graphql_1.merge(result, fragmentResult);\n                    _a.label = 4;\n\n                  case 4:\n                    return [2];\n                }\n              });\n            });\n          };\n\n          return [4, Promise.all(selectionSet.selections.map(execute))];\n\n        case 1:\n          _a.sent();\n\n          if (execContext.resultMapper) {\n            return [2, execContext.resultMapper(result, rootValue)];\n          }\n\n          return [2, result];\n      }\n    });\n  });\n}\n\nfunction executeField(field, rootValue, execContext) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var variables, contextValue, resolver, fieldName, args, info, result;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n          fieldName = field.name.value;\n          args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n          info = {\n            isLeaf: !field.selectionSet,\n            resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n            directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n            field: field\n          };\n          return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n\n        case 1:\n          result = _a.sent();\n\n          if (!field.selectionSet) {\n            return [2, result];\n          }\n\n          if (result == null) {\n            return [2, result];\n          }\n\n          if (Array.isArray(result)) {\n            return [2, executeSubSelectedArray(field, result, execContext)];\n          }\n\n          return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n      }\n    });\n  });\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return Promise.all(result.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    }\n\n    return executeSelectionSet(field.selectionSet, item, execContext);\n  }));\n}","map":{"version":3,"mappings":"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","names":["graphql","resolver","document","rootValue","contextValue","variableValues","execOptions","mainDefinition","apollo_utilities_1","fragments","fragmentMap","resultMapper","fragmentMatcher","execContext","executeSelectionSet","selectionSet","exports","variables","result","execute","selection","executeField","fieldResult","_a","resultFieldKey","undefined","graphql_1","fragment","name","value","Error","typeCondition","fragmentResult","Promise","all","selections","map","field","fieldName","args","info","isLeaf","resultKey","directives","Array","isArray","executeSubSelectedArray","item"],"sourceRoot":"","sources":["../src/async.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}